<#@ template language="C#" debug="True" hostspecific="True" #>
<#+
// --------------------------------------------------------------------------
// Initial Release : 2010-05-05
// Author          : Marnix De Groote
// --------------------------------------------------------------------------

public class RepositorySpTemplateBase : Template
{
 	public TableInfo TableInfo;
	public string TableSchema;				// If null, use TableInfo.Schema, if empty suppress schema
	public string StoredProcedureSchema;	// if null or empty, use TableInfo.Schema

	protected StringHelper 	_strH = new StringHelper();
	protected SpType		_spType;
	protected string 		tableSchemaPrefix = string.Empty;
	protected bool 			GenerateDynamicSql;
	protected string 		tableName;
	protected string 		idName;
	protected string 		idSqlDbType; 
	protected string 		idTSqlDbType; 
	protected string		quote = "'";
	protected bool			isPkNonCompositeAndAutoGenerated;

	protected enum SpType
	{
		SelectById,	
		SelectAll,
		Update,	
		Insert,		
		Delete,			
	}
	
	protected RepositorySpTemplateBase(SpType spType)
	{
		_spType = spType;
	}
	
    public override string TransformText()
	{
        return this.GenerationEnvironment.ToString();
	}

	protected virtual void RenderStoredProcedure()
    {
		if (TableSchema == null)
		{
			tableSchemaPrefix = "[" + TableInfo.Schema + "]."; 
		}
		else if (TableSchema != string.Empty)
		{
			tableSchemaPrefix = "[" + TableSchema + "].";
		}
		if (string.IsNullOrEmpty(StoredProcedureSchema))
		{
			StoredProcedureSchema = TableInfo.Schema; 
		}
		if (string.IsNullOrEmpty(StoredProcedureSchema))
		{
			StoredProcedureSchema = TableInfo.Schema; 
		}
		// If TableSchema is empty, the schema name is provided as input parameter to the CRUD
		// functions and thus is used in a dynamic way. This solution is choosen because setting
		// the default schema for the current user does not allways work in stored procedures 
		// (the stored procedure does not always pickup the right default schema).
		// If the schema is provided in a dynamic way, and because of the issue with default schema,
		// the database objects must be qualified with the schema name abd the Sql commands must
		// also be provided in a dynamic way.
		GenerateDynamicSql = (tableSchemaPrefix == string.Empty);
		tableName = TableInfo.TableName;
		idName = TableInfo.IdName;
		idSqlDbType = TableInfo.IdSqlDbType; 
		idTSqlDbType = TableInfo.IdTSqlDbType;
		isPkNonCompositeAndAutoGenerated = TableInfo.HasPk && !TableInfo.HasCompositePk && TableInfo.IsPkAutoGenerated;
	}
	
    protected void RenderSelectList()
    {
		bool first = true;
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			string separator = (first) ? " " : ",";
#>
        <#= separator #> [<#= columnInfo.Name #>] as [<#= columnInfo.Name #>]
<#+
			first = false;
		}
#>
<#+
	}	

	protected void RenderDropStoredProcedure(string storedProcedureName,string schema)
    {
#>
if exists (select * from dbo.sysobjects where id = object_id(N'[<#= schema #>].[<#= storedProcedureName #>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure [<#= schema #>].[<#= storedProcedureName #>]
GO
<#+
	}

	protected void RenderPrintStoredProcedureCreationStatus(string storedProcedureName)
    {
#>
-- Display the status of Proc creation
IF (@@Error = 0) 
    PRINT 'Procedure Creation: <#= storedProcedureName #> Succeeded'
ELSE 
    PRINT 'Procedure Creation: <#= storedProcedureName #> Error on Creation'
GO
<#+
	}
	
	protected void RenderParameterValueListWithoutIdentifiers(string surroundWith)
    {
		bool first = true;
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			if (columnInfo.IsIdentity && (columnInfo.IsGuidKey == false))
			{
				continue;
			}
			string separator = (first) ? surroundWith.Substring(0,1) : ",";
			string columnName = columnInfo.Name;
#>
        <#= separator #> @<#= columnName #>
<#+
			first = false;
		}
#>
        <#= surroundWith.Substring(1,1) #>
<#+
	}	

	protected void RenderParameterValueListForDynamicSql(string surroundWith, bool returnsIdentifiers)
    {
		bool first = true;
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			string separator = (first) ? surroundWith.Substring(0,1) : ",";
			string columnName = columnInfo.Name;
			string outputSuffix = (returnsIdentifiers && columnInfo.IsIdentity) ? " output" : string.Empty;
#>
        <#= separator #> @<#= columnName #><#= outputSuffix #>
<#+
			first = false;
		}
#>
        <#= surroundWith.Substring(1,1) #>
<#+
	}	

	protected void RenderParameterDefinitionList(bool renderPkOnly) // Used with sp_executeSql
	{
#>
    <#= quote #> @Err Int output
<#+
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			if (renderPkOnly && (columnInfo.IsInPrimaryKey == false)) continue;
			if ((_spType == SpType.Insert) && (columnInfo.IsIdentity))
			{
#>
    , @<#= columnInfo.Name #> <#= columnInfo.TSqlDbType #> output
<#+
			}
			else
			{
#>
    , @<#= columnInfo.Name #> <#= columnInfo.TSqlDbType #>
<#+
			}
		}
#>
    <#= quote #>;
<#+
	}
	
	protected virtual bool RenderParameterDeclarationList()
	{
		bool first = true;
		if (GenerateDynamicSql)
		{
#>
(   @Schema sysname
<#+
			first = false;
		}
		return first;
	}

	protected virtual bool RenderParameterDeclarationList(bool renderPkOnly, bool returnsIdentifiers)
	{
		bool first = RenderParameterDeclarationList();
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			if (renderPkOnly && (columnInfo.IsInPrimaryKey == false)) continue;
			string separator = (first) ? "(" : ",";
			if (returnsIdentifiers && columnInfo.IsIdentity)
			{
#>
<#= separator #>   @<#= columnInfo.Name #> <#= columnInfo.TSqlDbType #> = NULL output
<#+
			}
			else if (columnInfo.CanBeNull)
			{
#>
<#= separator #>   @<#= columnInfo.Name #> <#= columnInfo.TSqlDbType #> = NULL
<#+
			}
			else
			{
#>
<#= separator #>   @<#= columnInfo.Name #> <#= columnInfo.TSqlDbType #>
<#+
			}
			first = false;
		}
#>
)
<#+
		return first;
	}
	
	protected virtual void RenderWhereList()
	{
		if (TableInfo.HasCompositePk)
		{
			bool first = true;
			foreach (ColumnInfo columnInfo in TableInfo.PkColumnInfos)
			{
				string separator = (first) ? "   " : "AND";
#>
        <#= separator #>[<#= columnInfo.Name #>] = @<#= columnInfo.Name #>
<#+			
				first = false;
			}
		}
		else // No composite Pk
		{
#>
        [<#= idName #>] = @<#= idName #>
<#+			
		}
	}
	
	protected virtual void RenderKeyParamList() // Used in dynamic Sql expressions
	{
		if (TableInfo.HasCompositePk)
		{
			foreach (ColumnInfo columnInfo in TableInfo.PkColumnInfos)
			{
#>
        , @<#= columnInfo.Name #>
<#+			
			}
		}
		else // No composite Pk
		{
#>
        , @<#= idName #> 
<#+			
		}
	}
}
#>
