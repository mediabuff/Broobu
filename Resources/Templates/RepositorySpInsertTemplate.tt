<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension="sql"  #>
<#@template debug="true" #>
<#+
// --------------------------------------------------------------------------
// Initial Release : 2010-05-05
// Author          : Marnix De Groote
// --------------------------------------------------------------------------

public class RepositorySpInsertTemplate : RepositorySpTemplateBase
{
	public RepositorySpInsertTemplate()
		: base(SpType.Insert)
	{}
	
	public override string TransformText()
    {
		RenderStoredProcedure();
        return this.GenerationEnvironment.ToString();
    }
		
    protected override void RenderStoredProcedure()
    {
		base.RenderStoredProcedure();
		string storedProcedureName = tableName + "_Insert";
		bool renderPkOnly;
		bool returnsIdentifiers;

#>
-----------------------------------------------------------------------------

<#+
		RenderDropStoredProcedure(storedProcedureName, StoredProcedureSchema);
#>

CREATE PROCEDURE [<#= StoredProcedureSchema #>].[<#= storedProcedureName #>]
<#+
		renderPkOnly = false;
		returnsIdentifiers = true;
		RenderParameterDeclarationList(renderPkOnly, returnsIdentifiers);
#>
AS
BEGIN

    SET NOCOUNT ON
    DECLARE @Err int

<#+ 	if (idSqlDbType == "UniqueIdentifier")
		{
#>
	SET @<#= idName #> = newid()
	
<#+
		} 
		if (GenerateDynamicSql == false) 
		{
#>
	INSERT
    INTO <#= tableSchemaPrefix #>[<#= tableName #>]
<#+
			RenderColumnList();
#>
    VALUES
<#+
			RenderParameterValueListWithoutIdentifiers("()");
#>

    SET @Err = @@Error
<#+
			if (isPkNonCompositeAndAutoGenerated)
			{
#>
    SELECT @<#= idName #> = SCOPE_IDENTITY()
<#+
			}
		}
		else // Dynamic SQL -- Unique Identifier not yet supported
		{
#>
    DECLARE @ExecErr int;
    DECLARE @Cmd nvarchar(4000);
    DECLARE @ParamDefinition nvarchar(4000);
    
    SET @Cmd = <#= quote #>
	INSERT
    INTO [<#= quote #> + @Schema + <#= quote #>].[<#= tableName #>]
<#+
			RenderColumnList();
#>
    VALUES
<#+
			RenderParameterValueListWithoutIdentifiers("()");
#>
        
    SET @Err = @@Error
<#+
			if (isPkNonCompositeAndAutoGenerated)
			{
#>
    SET @<#= idName #> = SCOPE_IDENTITY()
<#+
			}
#>
    <#= quote #>;
    
    set @ParamDefinition =
<#+
			renderPkOnly = false;
			RenderParameterDefinitionList(renderPkOnly);
#>

    EXECUTE @ExecErr = sp_executeSql @Cmd, @ParamDefinition
        , @Err output 
<#+
			returnsIdentifiers = true;
			RenderParameterValueListForDynamicSql(",;", returnsIdentifiers);
#>
                
    IF @ExecErr <> 0 set @err = @ExecErr;
<#+
		}
#>
    RETURN @Err
END
GO

<#+
		RenderPrintStoredProcedureCreationStatus(storedProcedureName);
#>


<#+
	}
	
	private void RenderColumnList()
    {
		bool first = true;
		foreach(ColumnInfo columnInfo in TableInfo.ColumnInfos)
		{
			if (columnInfo.IsIdentity && (columnInfo.IsGuidKey == false))
			{
				continue;
			}
			string separator = (first) ? "(" : ",";
#>
        <#= separator #> [<#= columnInfo.Name #>]
<#+
			first = false;
		}
#>
        )
<#+
	}	
}
#>
