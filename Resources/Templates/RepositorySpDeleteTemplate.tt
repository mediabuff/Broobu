<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension="sql"  #>
<#+
// --------------------------------------------------------------------------
// Initial Release : 2010-05-05
// Author          : Marnix De Groote
// --------------------------------------------------------------------------

public class RepositorySpDeleteTemplate : RepositorySpTemplateBase
{
	public RepositorySpDeleteTemplate()
		: base(SpType.Delete)
	{}

	public override string TransformText()
    {
		RenderStoredProcedure();
        return this.GenerationEnvironment.ToString();
    }
		
    protected override void RenderStoredProcedure()
    {
		base.RenderStoredProcedure();
		string storedProcedureName = tableName + "_Delete";
		bool renderPkOnly;

#>
-----------------------------------------------------------------------------

<#+
		RenderDropStoredProcedure(storedProcedureName, StoredProcedureSchema);
#>

CREATE PROCEDURE [<#= StoredProcedureSchema #>].[<#= storedProcedureName #>]
<#+
		renderPkOnly = true;
		bool returnsIdentifiers = false;
		RenderParameterDeclarationList(renderPkOnly, returnsIdentifiers);
#>
AS
BEGIN

    SET NOCOUNT ON
    DECLARE @Err int

<#+	if (GenerateDynamicSql == false)
	{
#>
    DELETE
    FROM <#= tableSchemaPrefix #>[<#= tableName #>]
    WHERE
<#+
		RenderWhereList();
#>

    SET @Err = @@Error
<#+
	}
	else // Dynamic SQL
	{
#>
    DECLARE @ExecErr int;
    DECLARE @Cmd nvarchar(4000);
    DECLARE @ParamDefinition nvarchar(4000);
    
    SET @Cmd = <#= quote #>
    DELETE
    FROM [<#= quote #> + @Schema + <#= quote #>].[<#= tableName #>]
    WHERE
<#+
		RenderWhereList();
#>
        
    SET @Err = @@Error
	<#= quote #>;
    
    set @ParamDefinition =
<#+
		renderPkOnly = true;
		RenderParameterDefinitionList(renderPkOnly);
#>

    EXECUTE @ExecErr = sp_executeSql @Cmd, @ParamDefinition
        , @Err output 
<#+
		RenderKeyParamList();
#>
		;
                
    IF @ExecErr <> 0 set @err = @ExecErr;
<#+
	}
#>
    RETURN @Err
END
GO

<#+
		RenderPrintStoredProcedureCreationStatus(storedProcedureName);
#>


<#+
    }
}
#>
