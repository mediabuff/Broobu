<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf351"
	xmlns:ribbonThemes="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Themes;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf351"
    >
	
	<!-- ribbonControlsPrimitives:MenuItem -->
	<Style x:Key="{x:Type ribbonControlsPrimitives:MenuItem}" TargetType="{x:Type ribbonControlsPrimitives:MenuItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				
				<ControlTemplate TargetType="{x:Type ribbonControlsPrimitives:MenuItem}">
					<ContentPresenter Content="{TemplateBinding Content}"
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" /> 
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
		<Style.Triggers>
			<Trigger Property="ribbonUI:RibbonControlService.IsExternalContentSupported" Value="True">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ribbonControlsPrimitives:MenuItem}">
							
							<Grid SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallPopupColumnWidthGridLength}"/>
								</Grid.ColumnDefinitions>

								<Border BorderThickness="0,0,1,0" SnapsToDevicePixels="True" 
									BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorLightBrushKey}}" 
									Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemIconColumnBackgroundBrushKey}}">
									<Rectangle Margin="0,-1,0,-1" Width="1" HorizontalAlignment="Right" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorDarkBrushKey}}" SnapsToDevicePixels="True" />
								</Border>
								
								<Rectangle x:Name="OuterBorder" Grid.ColumnSpan="4" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
								<Rectangle x:Name="Background" Grid.ColumnSpan="4" Margin="1" Fill="Transparent" SnapsToDevicePixels="True" />
								<Rectangle x:Name="InnerBorder" Grid.ColumnSpan="4" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
								
								<Border x:Name="ImageBorder" Margin="2,2,0,2" Width="20" Height="20" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True">
									<Grid>
										<Image x:Name="Image" Width="16" Height="16" VerticalAlignment="Center"
											Source="{TemplateBinding ribbonUI:RibbonControlService.ImageSourceSmall}" Stretch="Uniform" />
										<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
											Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}" SnapsToDevicePixels="True" />
									</Grid>
								</Border>
								<TextBlock x:Name="Label" Grid.Column="1" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" 
								  Text="{TemplateBinding ribbonUI:RibbonControlService.Label}" />

								<ContentPresenter Grid.Column="2" Margin="5,0,5,0" Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}" 
									ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" /> 
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="ribbonUI:RibbonControlService.Label" Value="{x:Null}">
									<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="ribbonUI:RibbonControlService.Label" Value="">
									<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="ribbonUI:RibbonControlService.ImageSourceSmall" Value="{x:Null}">
									<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ribbonUI:RibbonControlService.ImageSourceLarge)}"/>
								</Trigger>
								<Trigger Property="IsContentEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
									<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
								</Trigger>						
								
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsContentEnabled" Value="True" />
										<Condition Property="ribbonUI:RibbonControlService.IsHighlighted" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
									<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
									<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsContentEnabled" Value="False" />
										<Condition Property="ribbonUI:RibbonControlService.IsHighlighted" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundDisabledBrushKey}}" />
									<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
									<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- ribbonControls:Menu -->
	<Style x:Key="{x:Type ribbonControls:Menu}" TargetType="{x:Type ribbonControls:Menu}">
		<Setter Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuBackgroundBrushKey}}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbonControls:Menu}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ItemsPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>