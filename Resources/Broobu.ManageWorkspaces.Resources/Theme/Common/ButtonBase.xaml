<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:systemComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonInput="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Input;assembly=ActiproSoftware.Ribbon.Wpf351"
	xmlns:ribbonThemes="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Themes;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf351"
    >
	
	<!-- ButtonBaseLargeTemplate -->
	<ControlTemplate x:Key="ButtonBaseLargeTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Grid.RowDefinitions>
				<RowDefinition x:Name="PART_Button" Height="{x:Static ribbonUI:RibbonMeasurements.ButtonBaseLargeIconHeightGridLength}" />
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>
			
			<Rectangle x:Name="OuterBorder" Grid.RowSpan="2" Fill="{TemplateBinding Background}" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="RadialBackground" Grid.RowSpan="2" Fill="Transparent" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
		
			<Image x:Name="Image" Margin="3,0,3,0" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"
				Source="{TemplateBinding ImageSourceLarge}" SnapsToDevicePixels="True" />
			<ribbonControlsPrimitives:TwoLineLabel x:Name="Label" Grid.Row="1" Margin="3,0,3,0" IsEnabled="{TemplateBinding IsEnabled}" HorizontalAlignment="Center" VerticalAlignment="Top" 
				Label="{TemplateBinding Label}" SnapsToDevicePixels="True" />
			
			<Rectangle x:Name="InnerBorder" Grid.RowSpan="2" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundPressedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="RadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeRadialBackgroundPressedBrushKey}}" />
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPressedBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>					
	</ControlTemplate>
	
	<!-- ButtonBaseSmallTemplate -->
	<ControlTemplate x:Key="ButtonBaseSmallTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Rectangle x:Name="OuterBorder" Fill="{TemplateBinding Background}" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="RadialBackground" Fill="Transparent" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="InnerBorder" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
		
			<StackPanel x:Name="PART_Button" Margin="{TemplateBinding Padding}" Orientation="Horizontal" SnapsToDevicePixels="True" 
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Image x:Name="Image" Margin="1" VerticalAlignment="Center" Stretch="Uniform" 
					Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
					Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
					Source="{TemplateBinding ImageSourceSmall}" SnapsToDevicePixels="True" />
				<TextBlock x:Name="Label" Margin="3,0,2,0" VerticalAlignment="Center" 
					Text="{TemplateBinding Label}" SnapsToDevicePixels="True" />
				<Path x:Name="DropDownArrow" Margin="2,0,3,0" VerticalAlignment="Center" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlDropDownArrowBrushKey}}" 
					Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" Visibility="Collapsed" />
			</StackPanel>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="DropDownArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="Label" Property="Margin" Value="2,0,2,0" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Small" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Collapsed" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<Trigger Property="HasLabel" Value="False">
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>				
			</Trigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsMouseOver" Value="False" />
					<Condition Property="Context" Value="StatusBarItem" />
				</MultiTrigger.Conditions>
		        <Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.TabForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPressedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="RadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallRadialBackgroundPressedBrushKey}}" />
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPressedBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>					
	</ControlTemplate>
	
	<!-- ButtonBaseMenuItemLargeTemplate -->
	<ControlTemplate x:Key="ButtonBaseMenuItemLargeTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargePopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Rectangle x:Name="OuterBorder" Grid.ColumnSpan="3" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="Background" Grid.ColumnSpan="3" Margin="1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2,2,0,2" Width="36" Height="36" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True">
				<Grid>
					<Image x:Name="Image" Width="32" Height="32" VerticalAlignment="Center"
						Source="{TemplateBinding ImageSourceLarge}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}" SnapsToDevicePixels="True" />
				</Grid>
			</Border>
			
			<Grid x:Name="LabelStackPanel" Grid.Column="1" Margin="5,0,5,0" VerticalAlignment="Top">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>
				
				<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" Margin="0,3,0,0" FontWeight="Bold" SnapsToDevicePixels="True" 
								 Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" />
				<TextBlock x:Name="MenuItemDescription" Margin="0,2,0,3" LineHeight="{Binding RelativeSource={RelativeSource Self}, Path=FontSize}" LineStackingStrategy="BlockLineHeight" Grid.Row="1" TextWrapping="Wrap" Text="{TemplateBinding MenuItemDescription}" SnapsToDevicePixels="True" />
			</Grid>
			
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
				Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlRightArrowBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="SubmenuArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="MenuItemDescription" Value="{x:Null}">
				<Setter TargetName="LabelStackPanel" Property="VerticalAlignment" Value="Center" />
				<Setter TargetName="Label" Property="Margin" Value="0" />
				<Setter TargetName="Label" Property="FontWeight" Value="Normal" />
				<Setter TargetName="MenuItemDescription" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="MenuItemDescription" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBorderBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBackgroundBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ButtonBaseMenuItemSmallTemplate -->
	<ControlTemplate x:Key="ButtonBaseMenuItemSmallTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallPopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Border BorderThickness="0,0,1,0" SnapsToDevicePixels="True" 
				BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorLightBrushKey}}" 
				Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemIconColumnBackgroundBrushKey}}">
				<Rectangle Margin="0,-1,0,-1" Width="1" HorizontalAlignment="Right" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorDarkBrushKey}}" SnapsToDevicePixels="True" />
			</Border>
			
			<Rectangle x:Name="OuterBorder" Grid.ColumnSpan="3" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="Background" Grid.ColumnSpan="3" Margin="1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2,2,0,2" Width="20" Height="20" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True">
				<Grid>
					<Image x:Name="Image" HorizontalAlignment="Center" VerticalAlignment="Center"
						Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
						Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
						Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}" SnapsToDevicePixels="True" />
				</Grid>
			</Border>
			<DockPanel Grid.Column="1" Margin="5,0,5,0">
				<TextBlock x:Name="InputGestureText" DockPanel.Dock="Right" Margin="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" />				
				<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" VerticalAlignment="Center" 
						   Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" />
			</DockPanel>
			
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" 
				Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlRightArrowBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="SubmenuArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="InputGestureText" Value="{x:Null}">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="ribbonControls:Menu.IsMenuItemInputGestureTextVisible" Value="False">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBorderBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBackgroundBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ApplicationMenuFooterButtonTemplate -->
	<ControlTemplate x:Key="ApplicationMenuFooterButtonTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Border x:Name="Border"  
			Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBackgroundNormalBrushKey}}" 
			BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBorderNormalBrushKey}}"
			BorderThickness="1" CornerRadius="2" SnapsToDevicePixels="True">
			<StackPanel Margin="6,3,6,3" Orientation="Horizontal">
				<Image x:Name="Image" Width="16" Height="16" Margin="0,0,3,0" Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
				<shared:PixelSnapper VerticalAlignment="Center">
					<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" 
							   Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" />
				</shared:PixelSnapper>
			</StackPanel>
		</Border>
		
		<ControlTemplate.Triggers>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBorderDisabledBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBackgroundPressedBrushKey}}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBorderPressedBrushKey}}" />
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBackgroundPressedBrushKey}}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ApplicationMenuFooterButtonBorderPressedBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
			
	<!-- ribbonControls:Button -->
	<Style x:Key="{x:Type ribbonControls:Button}" TargetType="{x:Type ribbonControls:Button}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundBrushKey}}"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="MinWidth" Value="14"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseSmallTemplate}" />
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="HasLabel" Value="False" />
					<Condition Property="systemComponentModel:DesignerProperties.IsInDesignMode" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="ImageSourceSmall" Value="/ActiproSoftware.Ribbon.Wpf351;component/Products/Ribbon/Images/ButtonDefault16.png" />
				<Setter Property="ImageSourceLarge" Value="/ActiproSoftware.Ribbon.Wpf351;component/Products/Ribbon/Images/ButtonDefault32.png" />
			</MultiTrigger>
			<Trigger Property="VariantSize" Value="Large">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseLargeTemplate}" />
			</Trigger>
			<Trigger Property="VariantSize" Value="Collapsed">
				<Setter Property="MinHeight" Value="0"/>				
				<Setter Property="MinWidth" Value="0"/>				
			</Trigger>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
			<Trigger Property="Context" Value="ApplicationMenuFooterButton">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
				<Setter Property="Margin" Value="3,1,3,1" />
				<Setter Property="Template" Value="{StaticResource ApplicationMenuFooterButtonTemplate}" />
			</Trigger>
			<Trigger Property="Context" Value="StatusBarItem">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>				
				<Setter Property="Padding" Value="0"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- ribbonControls:CheckBox -->
	<Style x:Key="{x:Type ribbonControls:CheckBox}" TargetType="{x:Type ribbonControls:CheckBox}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundBrushKey}}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
					<DockPanel Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Border x:Name="OuterBorder" DockPanel.Dock="Left" Margin="3" Width="13" Height="13" BorderThickness="1" VerticalAlignment="Center"
							BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderNormalBrushKey}}" SnapsToDevicePixels="True">
							<Border x:Name="InnerBorder" Margin="1" BorderThickness="1" 
								BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderNormalBrushKey}}" 
								Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundNormalBrushKey}}" SnapsToDevicePixels="True">
								<Grid>
									<Path x:Name="CheckBox" Margin="-1" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
										Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxForegroundBrushKey}}" 
										Data="M 0.5,6.5 L 3.5,9.5 L 4.5,9.5 L 7.5,1.5 L 6,0.5 L 3.5,7 L 1.5,5 Z" SnapsToDevicePixels="False" />
									<Rectangle x:Name="Indeterminate" Visibility="Collapsed" Opacity="0.5"
										Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxForegroundBrushKey}}" />
								</Grid>
							</Border>
						</Border>
						<Grid Margin="0,0,3,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="True">
							<Rectangle x:Name="LabelFocus" StrokeThickness="1" Stroke="#F0000000" StrokeDashArray="1 2" Visibility="Collapsed" SnapsToDevicePixels="True" />
							<TextBlock x:Name="Label" Margin="3,0,3,0" Text="{TemplateBinding Label}" />
						</Grid>
					</DockPanel>
					
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="CheckBox" Property="Visibility" Value="Visible"/>
						</Trigger>						
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="Indeterminate" Property="Visibility" Value="Visible"/>
						</Trigger>						
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderHoverBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundHoverBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderHoverBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundHoverBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderHoverBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundHoverBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderHoverBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundHoverBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseCaptured" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="LabelFocus" Property="Visibility" Value="Visible"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsPressed" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderPressedBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundPressedBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderPressedBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundPressedBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderDisabledBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundDisabledBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderDisabledBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundDisabledBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>
						</Trigger>						
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
		<Style.Triggers>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	
	<!-- ribbonControls:RadioButton -->
	<Style x:Key="{x:Type ribbonControls:RadioButton}" TargetType="{x:Type ribbonControls:RadioButton}">		
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundBrushKey}}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
					<DockPanel Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Grid DockPanel.Dock="Left" Margin="3" Width="13" Height="13" VerticalAlignment="Center">
							<Ellipse x:Name="OuterBorder" StrokeThickness="1"
								Stroke="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderNormalBrushKey}}" SnapsToDevicePixels="True" />
							<Ellipse x:Name="InnerBorder" Margin="2" StrokeThickness="1"
								Stroke="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderNormalBrushKey}}" 
								Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundNormalBrushKey}}" SnapsToDevicePixels="True" />
							<Ellipse x:Name="CheckBox" Margin="4" StrokeThickness="1" Visibility="Collapsed"
								Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxForegroundBrushKey}}" SnapsToDevicePixels="True" />
						</Grid>
						<Grid Margin="0,0,3,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="True">
							<Rectangle x:Name="LabelFocus" StrokeThickness="1" Stroke="#F0000000" StrokeDashArray="1 2" Visibility="Collapsed" SnapsToDevicePixels="True" />
							<TextBlock x:Name="Label" Margin="3,0,3,0" Text="{TemplateBinding Label}" />
						</Grid>
					</DockPanel>
					
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="CheckBox" Property="Visibility" Value="Visible"/>
						</Trigger>						
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderHoverBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundHoverBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderHoverBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundHoverBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderHoverBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundHoverBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderHoverBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundHoverBrushKey}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseCaptured" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="LabelFocus" Property="Visibility" Value="Visible"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsPressed" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderPressedBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundPressedBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderPressedBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundPressedBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBorderDisabledBrushKey}}"/>
							<Setter TargetName="OuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxOuterBackgroundDisabledBrushKey}}" />
							<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBorderDisabledBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.CheckBoxInnerBackgroundDisabledBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>
						</Trigger>						
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
		<Style.Triggers>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	
	<!-- RibbonControlsButtonLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonCollapsedStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonCollapsedStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="MinHeight" Value="0"/>				
		<Setter Property="MinWidth" Value="0"/>				
	</Style>
	
	<!-- RibbonControlsButtonBaseMenuItemLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonBaseMenuItemLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonBaseMenuItemSmallStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonBaseMenuItemSmallStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonStatusBarStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonStatusBarStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>				
		<Setter Property="Padding" Value="0"/>
	</Style>
	
</ResourceDictionary>