<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonInput="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Input;assembly=ActiproSoftware.Ribbon.Wpf351"
	xmlns:ribbonThemes="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Themes;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf351"
    >
	
	<!-- ComboBoxItemStyle -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
						<Border x:Name="InnerBorder" BorderThickness="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
                    </Border>
                    <ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsHighlighted" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
							<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<!-- ComboBoxCoreEditableTemplate -->
	<ControlTemplate x:Key="ComboBoxCoreEditableTemplate" TargetType="{x:Type ComboBox}">
		<ControlTemplate.Resources>
			<Style BasedOn="{StaticResource ComboBoxItemStyle}" TargetType="{x:Type ComboBoxItem}" />
			
			<shared:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter" />
		</ControlTemplate.Resources>
		
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			
			<Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" 
				   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<shared:DropShadowChrome Name="DropShadow" Color="Transparent" 
					MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
					<Border x:Name="DropDownBorder" BorderThickness="1"
							BorderBrush="{StaticResource {x:Static SystemColors.WindowFrameBrushKey}}"
							Background="{StaticResource {x:Static SystemColors.WindowBrushKey}}">
						<ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto"
									  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=ScrollViewerStyle}}">
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
				</shared:DropShadowChrome>
			</Popup>
			
			<Border x:Name="Border" Grid.ColumnSpan="2" Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundNormalBrushKey}}" 
				BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" 
				BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />

			<Rectangle x:Name="ButtonPartBackground" Grid.Column="1" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlButtonPartBackgroundHoverBrushKey}}" Visibility="Collapsed" />
			
			<ToggleButton x:Name="ToggleButton" Grid.Column="1" OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press"
						  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
				<ToggleButton.Template>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="ButtonOuterBorder" Grid.Column="1" Background="Transparent" BorderThickness="1">
							<Border x:Name="ButtonInnerBorder" BorderThickness="1">
								<Path x:Name="DropDownArrow" Margin="3" VerticalAlignment="Center" 
									Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlDropDownArrowBrushKey}}" 
									Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
							</Border>
						</Border>
						
						<ControlTemplate.Triggers>
							<Trigger Property="Tag" Value="IsMouseOver">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" />
							</Trigger>
							<Trigger Property="Tag" Value="IsKeyboardFocusWithin">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" />
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPopupOpenBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPopupOpenBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPopupOpenBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</ToggleButton.Template>
			</ToggleButton>
			
            <TextBox Name="PART_EditableTextBox"
                     Margin="2,0,1,0"
					 AllowDrop="True" 
					 FocusVisualStyle="{x:Null}" 
                     IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
					 MinWidth="0" 
					 MinHeight="0" 
					 OverridesDefaultStyle="True" 
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                     SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
					 >
				<TextBox.Template>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<ScrollViewer x:Name="PART_ContentHost"
									  Focusable="False"
									  HorizontalScrollBarVisibility="Hidden"
									  VerticalScrollBarVisibility="Hidden"
									  Background="Transparent"
									  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=ScrollViewerStyle}}" />
					</ControlTemplate>
				</TextBox.Template>
			</TextBox>

			<TextBlock x:Name="hint" Margin="3,0,2,0" 
					   Text="{TemplateBinding ribbonUI:RibbonControlService.HintText}" TextTrimming="CharacterEllipsis"
					   VerticalAlignment="Center" IsHitTestVisible="False" Opacity="0.67"
					   Foreground="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="ribbonUI:RibbonControlService.HintText" Value="{x:Null}">
				<Setter TargetName="hint" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={StaticResource IsNullOrEmptyConverter}}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To=".33" Duration="0:0:0.2" />									
						</Storyboard>
					</BeginStoryboard>
				</MultiDataTrigger.EnterActions>
				<MultiDataTrigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</MultiDataTrigger.ExitActions>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={StaticResource IsNullOrEmptyConverter}}" Value="False">
				<DataTrigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.EnterActions>
				<DataTrigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.ExitActions>
			</DataTrigger>
			
			<Trigger Property="ContextMenuService.HasDropShadow" Value="True">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
            </Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderDisabledBrushKey}}" />
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundDisabledBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>							
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
				<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
				<Setter TargetName="ToggleButton" Property="Tag" Value="IsMouseOver" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsKeyboardFocusWithin" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
				<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
				<Setter TargetName="ToggleButton" Property="Tag" Value="IsKeyboardFocusWithin" />
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ribbonControls:ComboBox -->
	<Style x:Key="{x:Type ribbonControls:ComboBox}" TargetType="ComboBox">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ContextMenuService.HasDropShadow" Value="{x:Static ribbon:Ribbon.DropShadowsEnabled}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<ControlTemplate.Resources>
						<Style BasedOn="{StaticResource ComboBoxItemStyle}" TargetType="{x:Type ComboBoxItem}" />
			
						<shared:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter" />
					</ControlTemplate.Resources>

					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						
						<Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" 
							   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
			                <shared:DropShadowChrome Name="DropShadow" Color="Transparent" 
								MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" BorderThickness="1"
										BorderBrush="{StaticResource {x:Static SystemColors.WindowFrameBrushKey}}"
										Background="{StaticResource {x:Static SystemColors.WindowBrushKey}}">
									<ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto"
												  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=ScrollViewerStyle}}">
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</ScrollViewer>
								</Border>
							</shared:DropShadowChrome>
						</Popup>
						
						<Border x:Name="Border" Grid.ColumnSpan="2" Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundNormalBrushKey}}" 
							BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" 
							BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />

						<Rectangle x:Name="ButtonPartBackground" Grid.Column="1" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlButtonPartBackgroundHoverBrushKey}}" Visibility="Collapsed" />
						
						<ToggleButton OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press" 
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Rectangle Fill="Transparent" />
								</ControlTemplate>								
							</ToggleButton.Template>
						</ToggleButton>
						
						<ToggleButton x:Name="ToggleButton" Grid.Column="1" OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press"
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Border x:Name="ButtonOuterBorder" Grid.Column="1" Background="Transparent" BorderThickness="1">
										<Border x:Name="ButtonInnerBorder" BorderThickness="1">
											<Path x:Name="DropDownArrow" Margin="3" VerticalAlignment="Center" 
												Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlDropDownArrowBrushKey}}" 
												Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
										</Border>
									</Border>
									
									<ControlTemplate.Triggers>
										<Trigger Property="Tag" Value="IsMouseOver">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" />
										</Trigger>
										<Trigger Property="Tag" Value="IsKeyboardFocusWithin">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="IsChecked" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPopupOpenBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPopupOpenBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPopupOpenBrushKey}}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</ToggleButton.Template>
						</ToggleButton>
						
						<ContentPresenter IsHitTestVisible="false"
										  Margin="3,1,1,1"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  SnapsToDevicePixels="True"/>
						
						<TextBlock x:Name="hint" Margin="3,0,2,0" 
								   Text="{TemplateBinding ribbonUI:RibbonControlService.HintText}" TextTrimming="CharacterEllipsis"
								   VerticalAlignment="Center" IsHitTestVisible="False" Opacity="0.67"
								   Foreground="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="ribbonUI:RibbonControlService.HintText" Value="{x:Null}">
							<Setter TargetName="hint" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectionBoxItem, Converter={StaticResource IsNullOrEmptyConverter}}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To=".33" Duration="0:0:0.2" />									
									</Storyboard>
								</BeginStoryboard>
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
									</Storyboard>
								</BeginStoryboard>
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectionBoxItem, Converter={StaticResource IsNullOrEmptyConverter}}" Value="False">
							<DataTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.EnterActions>
							<DataTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.ExitActions>
						</DataTrigger>
						
						<Trigger Property="ContextMenuService.HasDropShadow" Value="True">
							<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
						</Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
                        </Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderDisabledBrushKey}}" />
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundDisabledBrushKey}}" />
							<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>							
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="IsMouseOver" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocusWithin" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="IsKeyboardFocusWithin" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
				<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template" Value="{StaticResource ComboBoxCoreEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
	</Style>

</ResourceDictionary>