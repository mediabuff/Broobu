<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf351"
	xmlns:ribbonThemes="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Themes;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf351"
    >

	<ResourceDictionary.MergedDictionaries>
		
		<ResourceDictionary Source="MonthCalendar.xaml" />
		
	</ResourceDictionary.MergedDictionaries>

	<!-- DateTimePickerStyle -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=DateTimePickerStyle}" TargetType="{x:Type shared:DateTimePicker}" BasedOn="{StaticResource {x:Type shared:DateTimePicker}}">
		<Setter Property="ribbonUI:RibbonControlService.IsExternalContentSupported" Value="True" />

		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		
		<Setter Property="NextMonthButtonStyle" Value="{StaticResource NextMonthButtonStyle}" />
		<Setter Property="PreviousMonthButtonStyle" Value="{StaticResource PreviousMonthButtonStyle}" />
		<Setter Property="TitleStyle" Value="{StaticResource TitleStyle}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type shared:DateTimePicker}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						
						<Popup Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" 
							   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
			                <shared:DropShadowChrome Name="DropShadow" Color="Transparent" 
								MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" BorderThickness="1"
										BorderBrush="{StaticResource {x:Static SystemColors.WindowFrameBrushKey}}"
										Background="{StaticResource {x:Static SystemColors.WindowBrushKey}}">
                                    <ScrollViewer>
										<shared:MonthCalendar x:Name="PART_MonthCalendar" 
											ClearButtonContent="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ClearButtonContent}" 
											ClearButtonStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ClearButtonStyle}" 
											ClearButtonVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ClearButtonVisible}" 
											DayItemPresenterStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayItemPresenterStyle}" 
											DayItemPresenterStyleSelector="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayItemPresenterStyleSelector}" 
											DayItemsPresenterStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayItemsPresenterStyle}" 
											DayItemTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayItemTemplate}" 
											DayOfWeekHeadersVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayOfWeekHeadersVisible}" 
											DayOfWeekItemPresenterStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayOfWeekItemPresenterStyle}" 
											DayOfWeekItemPresenterStyleSelector="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayOfWeekItemPresenterStyleSelector}" 
											DayOfWeekItemTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DayOfWeekItemTemplate}" 
											FirstDayOfWeek="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FirstDayOfWeek}" 
											MaxDate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Maximum}" 
											MinDate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Minimum}" 
											NextMonthButtonStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NextMonthButtonStyle}" 
											PreviousMonthButtonStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PreviousMonthButtonStyle}" 
											TitleStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TitleStyle}" 
											TitleVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TitleVisible}" 
											TodayButtonContent="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TodayButtonContent}" 
											TodayButtonStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TodayButtonStyle}" 
											TodayButtonVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TodayButtonVisible}" 
											WeekNumberPresenterStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=WeekNumberPresenterStyle}" 
											WeekNumberPresenterStyleSelector="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=WeekNumberPresenterStyleSelector}" 
											WeekNumbersVisible="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=WeekNumbersVisible}" 
											WeekNumberTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=WeekNumberTemplate}" 
											/>                                        
                                    </ScrollViewer>
								</Border>
							</shared:DropShadowChrome>
						</Popup>
						
						<Border x:Name="Border" Grid.ColumnSpan="2" Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundNormalBrushKey}}" 
							BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" 
							BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />

						<Rectangle x:Name="ButtonPartBackground" Grid.Column="1" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlButtonPartBackgroundHoverBrushKey}}" Visibility="Collapsed" />
						
						<ToggleButton OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press" 
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Rectangle Fill="Transparent" />
								</ControlTemplate>								
							</ToggleButton.Template>
						</ToggleButton>
						
						<ToggleButton x:Name="ToggleButton" Grid.Column="1" OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press"
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Border x:Name="ButtonOuterBorder" Grid.Column="1" Background="Transparent" BorderThickness="1">
										<Border x:Name="ButtonInnerBorder" BorderThickness="1">
											<Path x:Name="DropDownArrow" Margin="3" VerticalAlignment="Center" 
												Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlDropDownArrowBrushKey}}" 
												Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
										</Border>
									</Border>
									
									<ControlTemplate.Triggers>
										<Trigger Property="Tag" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderNormalBrushKey}}" />
										</Trigger>																
										<Trigger Property="IsMouseOver" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="IsChecked" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPopupOpenBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPopupOpenBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPopupOpenBrushKey}}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</ToggleButton.Template>
						</ToggleButton>
						
						<ContentPresenter x:Name="NonEditableContent" 
									  Content="{Binding ElementName=PART_EditableTextBox, Path=Text}"
									  IsHitTestVisible="false"
									  Margin="3,1,1,1"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

						<TextBox Name="PART_EditableTextBox"
								 Margin="2,0,1,0"
								 AllowDrop="True" 
								 FocusVisualStyle="{x:Null}" 
								 IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
								 MinWidth="0" 
								 MinHeight="0" 
								 OverridesDefaultStyle="True" 
								 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								 SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
								 Visibility="Collapsed"
								 >
							<TextBox.Template>
								<ControlTemplate TargetType="{x:Type TextBox}">
									<ScrollViewer x:Name="PART_ContentHost"
												  Focusable="False"
												  HorizontalScrollBarVisibility="Hidden"
												  VerticalScrollBarVisibility="Hidden"
												  Background="Transparent"
												  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=ScrollViewerStyle}}" />
								</ControlTemplate>
							</TextBox.Template>
						</TextBox>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
							<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBorderDisabledBrushKey}}" />
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundDisabledBrushKey}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="True" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocusWithin" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.EditControlBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="True" />
						</MultiTrigger>
						<Trigger Property="IsEditable" Value="True">
							<Setter Property="IsTabStop" Value="False"/>
							<Setter TargetName="NonEditableContent" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>