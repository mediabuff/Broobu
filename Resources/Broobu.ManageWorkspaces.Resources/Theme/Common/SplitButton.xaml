<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:systemComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonInput="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Input;assembly=ActiproSoftware.Ribbon.Wpf351"
	xmlns:ribbonThemes="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Themes;assembly=ActiproSoftware.Ribbon.Wpf351"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf351"
    >
	<ResourceDictionary.MergedDictionaries>
		
		<ResourceDictionary Source="Popup.xaml" />
		
	</ResourceDictionary.MergedDictionaries>
	
	<!-- SplitButtonLargeTemplate -->
	<ControlTemplate x:Key="SplitButtonLargeTemplate" TargetType="{x:Type ribbonControls:SplitButton}">
		<Grid Background="Transparent" SnapsToDevicePixels="True">
			<Grid.RowDefinitions>
				<RowDefinition Height="{x:Static ribbonUI:RibbonMeasurements.ButtonBaseLargeIconHeightGridLength}" />
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>
			
			<Popup Name="PART_Popup" Grid.RowSpan="2" AllowsTransparency="True" MinWidth="16" MinHeight="16" StaysOpen="True"
					IsOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
					CustomPopupPlacementCallback="{TemplateBinding CustomPopupPlacementCallback}" 
					HorizontalOffset="{TemplateBinding PopupHorizontalOffset}"
					Placement="{TemplateBinding PopupPlacement}"
					PlacementRectangle="{TemplateBinding PopupPlacementRectangle}"
					PlacementTarget="{TemplateBinding PopupPlacementTarget}"
					VerticalOffset="{TemplateBinding PopupVerticalOffset}"
					>
				<AdornerDecorator SnapsToDevicePixels="True">
					<shared:DropShadowChrome Name="DropShadow" Color="Transparent">
						<Border x:Name="PopupOuterBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuOuterBorderBrushKey}}" BorderThickness="1" 
							Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuBackgroundBrushKey}}" SnapsToDevicePixels="True">
							<Border x:Name="PopupInnerBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuInnerBorderBrushKey}}" BorderThickness="1" SnapsToDevicePixels="True">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<ribbonControlsPrimitives:PopupScrollViewer CanContentScroll="True"
										Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuScrollViewer}}">
										<ribbonControlsPrimitives:PopupContentPresenter Content="{TemplateBinding PopupContent}" 
											ContentTemplate="{TemplateBinding PopupContentTemplate}" ContentTemplateSelector="{TemplateBinding PopupContentTemplateSelector}" />
									</ribbonControlsPrimitives:PopupScrollViewer>
									
									<Border Name="ResizeGripContainer" Grid.Row="1" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2" Visibility="Collapsed"
										BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripSeparatorBrushKey}}" SnapsToDevicePixels="True"
										Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripBackgroundBrushKey}}">
										<Thumb x:Name="PART_ResizeGrip" Style="{StaticResource BothResizeGripperStyle}" />
									</Border>
								</Grid>
							</Border>
						</Border>
					</shared:DropShadowChrome>
				</AdornerDecorator>
			</Popup>
					
			<Rectangle x:Name="PART_Button" Fill="Transparent" />
			
			<Border x:Name="LowerOuterBorder" Grid.RowSpan="2" 
				Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
				<Grid>
					<Rectangle x:Name="LowerBackground" SnapsToDevicePixels="True" />
					<Rectangle x:Name="LowerRadialBackground" SnapsToDevicePixels="True" />
					<Border x:Name="LowerInnerBorder" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" />
				</Grid>								
			</Border>
		
			<Border x:Name="UpperOuterBorder" MinHeight="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}" 
				Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
				<Grid>
					<Rectangle x:Name="UpperBackground" SnapsToDevicePixels="True" />
					<Rectangle x:Name="UpperRadialBackground" SnapsToDevicePixels="True" />
					<Border x:Name="UpperInnerBorder" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" />
				</Grid>
			</Border>
		
			<Image x:Name="Image" Margin="3,0,3,0" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"
				Source="{TemplateBinding ImageSourceLarge}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="SplitBorder" Height="1" Margin="1" VerticalAlignment="Bottom" Fill="Transparent" />
			<ribbonControlsPrimitives:TwoLineLabel x:Name="Label" Grid.Row="1" Margin="3,0,3,0" IsEnabled="{TemplateBinding IsEnabled}" HorizontalAlignment="Center" VerticalAlignment="Top" 
				Label="{TemplateBinding Label}" SnapsToDevicePixels="True" />
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade" />
			</Trigger>
			<Trigger Property="PopupHasBorder" Value="False">
				<Setter TargetName="PopupOuterBorder" Property="BorderThickness" Value="0" />
				<Setter TargetName="PopupOuterBorder" Property="Background" Value="{x:Null}" />
				<Setter TargetName="PopupInnerBorder" Property="BorderThickness" Value="0" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Both">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Vertical">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
				<Setter TargetName="PART_ResizeGrip" Property="Style" Value="{StaticResource VerticalResizeGripperStyle}" />
			</Trigger>
			
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSelectedBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSelectedBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
					<Condition Property="IsChecked" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSelectedBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPopupOpenBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundPopupOpenBrushKey}}" />
				<Setter TargetName="LowerRadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeRadialBackgroundPopupOpenBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPopupOpenBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="UpperOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="UpperBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundPressedBrushKey}}" />
				<Setter TargetName="UpperRadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeRadialBackgroundPressedBrushKey}}" />
				<Setter TargetName="UpperInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPressedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="LowerOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LowerBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LowerInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>					
	</ControlTemplate>
	
	<!-- SplitButtonSmallTemplate -->
	<ControlTemplate x:Key="SplitButtonSmallTemplate" TargetType="{x:Type ribbonControls:SplitButton}">
		<Grid Background="Transparent" SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.SplitButtonPopupPartWidthGridLength}" />
			</Grid.ColumnDefinitions>

			<Popup Name="PART_Popup" Grid.ColumnSpan="2" AllowsTransparency="True" MinWidth="16" MinHeight="16" StaysOpen="True"
					IsOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
					CustomPopupPlacementCallback="{TemplateBinding CustomPopupPlacementCallback}" 
					HorizontalOffset="{TemplateBinding PopupHorizontalOffset}"
					Placement="{TemplateBinding PopupPlacement}"
					PlacementRectangle="{TemplateBinding PopupPlacementRectangle}"
					PlacementTarget="{TemplateBinding PopupPlacementTarget}"
					VerticalOffset="{TemplateBinding PopupVerticalOffset}"
					>
				<AdornerDecorator SnapsToDevicePixels="True">
					<shared:DropShadowChrome Name="DropShadow" Color="Transparent">
						<Border x:Name="PopupOuterBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuOuterBorderBrushKey}}" BorderThickness="1" 
							Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuBackgroundBrushKey}}" SnapsToDevicePixels="True">
							<Border x:Name="PopupInnerBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuInnerBorderBrushKey}}" BorderThickness="1" SnapsToDevicePixels="True">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<ribbonControlsPrimitives:PopupScrollViewer CanContentScroll="True"
										Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuScrollViewer}}">
										<ribbonControlsPrimitives:PopupContentPresenter Content="{TemplateBinding PopupContent}" 
											ContentTemplate="{TemplateBinding PopupContentTemplate}" ContentTemplateSelector="{TemplateBinding PopupContentTemplateSelector}" />
									</ribbonControlsPrimitives:PopupScrollViewer>
									
									<Border Name="ResizeGripContainer" Grid.Row="1" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2" Visibility="Collapsed"
										BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripSeparatorBrushKey}}" SnapsToDevicePixels="True"
										Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripBackgroundBrushKey}}">
										<Thumb x:Name="PART_ResizeGrip" Style="{StaticResource BothResizeGripperStyle}"  />
									</Border>
								</Grid>
							</Border>
						</Border>
					</shared:DropShadowChrome>
				</AdornerDecorator>
			</Popup>
					
			<ribbonControlsPrimitives:GridColumnBoundsCalculator x:Name="ColumnBounds" />
			
			<Border x:Name="LeftOuterBorder" Grid.ColumnSpan="2" 
				Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
				<Border.Clip>
					<RectangleGeometry Rect="{Binding ElementName=ColumnBounds, Path=Column1Bounds}" />
				</Border.Clip>
				<Grid>
					<Rectangle x:Name="LeftBackground" SnapsToDevicePixels="True" />
					<Rectangle x:Name="LeftRadialBackground" SnapsToDevicePixels="True" />
					<Border x:Name="LeftInnerBorder" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" />
				</Grid>
			</Border>
		
			<Border x:Name="RightOuterBorder" Grid.ColumnSpan="2" 
				Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
				<Border.Clip>
					<RectangleGeometry Rect="{Binding ElementName=ColumnBounds, Path=Column2Bounds}" />
				</Border.Clip>
				<Grid>
					<Rectangle x:Name="RightBackground" SnapsToDevicePixels="True" />
					<Rectangle x:Name="RightRadialBackground" SnapsToDevicePixels="True" />
					<Border x:Name="RightInnerBorder" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" />
				</Grid>								
			</Border>
		
			<StackPanel x:Name="PART_Button" Margin="{TemplateBinding Padding}" Orientation="Horizontal" VerticalAlignment="Center" SnapsToDevicePixels="True">
				<Image x:Name="Image" Margin="1" VerticalAlignment="Center" Stretch="Uniform" 
					Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
					Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
					Source="{TemplateBinding ImageSourceSmall}" SnapsToDevicePixels="True" />
				<TextBlock x:Name="Label" Margin="3,0,2,0" VerticalAlignment="Center" 
					Text="{TemplateBinding Label}" SnapsToDevicePixels="True" />
			</StackPanel>
			<Rectangle x:Name="SplitBorder" Width="1" Margin="0,1,0,1" HorizontalAlignment="Right" Fill="Transparent" />
			<Path x:Name="DropDownArrow" Grid.Column="1" Margin="3" VerticalAlignment="Center" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlDropDownArrowBrushKey}}" 
				Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
		</Grid>
	
		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade" />
			</Trigger>
			<Trigger Property="PopupHasBorder" Value="False">
				<Setter TargetName="PopupOuterBorder" Property="BorderThickness" Value="0" />
				<Setter TargetName="PopupOuterBorder" Property="Background" Value="{x:Null}" />
				<Setter TargetName="PopupInnerBorder" Property="BorderThickness" Value="0" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Both">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Vertical">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
				<Setter TargetName="PART_ResizeGrip" Property="Style" Value="{StaticResource VerticalResizeGripperStyle}" />
			</Trigger>
			
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="Label" Property="Margin" Value="2,0,2,0" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Small" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Collapsed" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<Trigger Property="HasLabel" Value="False">
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundDisabledBrushKey}}"/>				
			</Trigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsMouseOver" Value="False" />
					<Condition Property="Context" Value="StatusBarItem" />
				</MultiTrigger.Conditions>
		        <Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.TabForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPopupOpenBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPopupOpenBrushKey}}" />
				<Setter TargetName="RightRadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallRadialBackgroundPopupOpenBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPopupOpenBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSelectedBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverSelectedBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LeftOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="LeftBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundPressedBrushKey}}" />
				<Setter TargetName="LeftRadialBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallRadialBackgroundPressedBrushKey}}" />
				<Setter TargetName="LeftInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderPressedBrushKey}}"/>
				<Setter TargetName="SplitBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}"/>
				<Setter TargetName="RightOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="RightInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>	
	</ControlTemplate>
	
	<!-- SplitButtonMenuItemLargeTemplate -->
	<ControlTemplate x:Key="SplitButtonMenuItemLargeTemplate" TargetType="{x:Type ribbonControls:SplitButton}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargePopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Popup Name="PART_Popup" Grid.ColumnSpan="3" AllowsTransparency="True" MinWidth="16" MinHeight="16" StaysOpen="True"
					IsOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
					CustomPopupPlacementCallback="{TemplateBinding CustomPopupPlacementCallback}" 
					HorizontalOffset="{TemplateBinding PopupHorizontalOffset}"
					Placement="{TemplateBinding PopupPlacement}"
					PlacementRectangle="{TemplateBinding PopupPlacementRectangle}"
					PlacementTarget="{TemplateBinding PopupPlacementTarget}"
					VerticalOffset="{TemplateBinding PopupVerticalOffset}"
					>
				<AdornerDecorator SnapsToDevicePixels="True">
					<shared:DropShadowChrome Name="DropShadow" Color="Transparent">
						<Border x:Name="PopupOuterBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuOuterBorderBrushKey}}" BorderThickness="1" 
							Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuBackgroundBrushKey}}" SnapsToDevicePixels="True">
							<Border x:Name="PopupInnerBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuInnerBorderBrushKey}}" BorderThickness="1" SnapsToDevicePixels="True">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<ribbonControlsPrimitives:PopupScrollViewer CanContentScroll="True"
										Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuScrollViewer}}">
										<ribbonControlsPrimitives:PopupContentPresenter Content="{TemplateBinding PopupContent}" 
											ContentTemplate="{TemplateBinding PopupContentTemplate}" ContentTemplateSelector="{TemplateBinding PopupContentTemplateSelector}" />
									</ribbonControlsPrimitives:PopupScrollViewer>
									
									<Border Name="ResizeGripContainer" Grid.Row="1" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2" Visibility="Collapsed"
										BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripSeparatorBrushKey}}" SnapsToDevicePixels="True"
										Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripBackgroundBrushKey}}">
										<Thumb x:Name="PART_ResizeGrip" Style="{StaticResource BothResizeGripperStyle}"  />
									</Border>
								</Grid>
							</Border>
						</Border>
					</shared:DropShadowChrome>
				</AdornerDecorator>
			</Popup>
				
			<Rectangle x:Name="OuterBorder" Grid.ColumnSpan="3" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="PART_Button" Grid.ColumnSpan="2" Margin="1,1,0,1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="RightBackground" Grid.Column="2" Margin="0,1,1,1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2,2,0,2" Width="36" Height="36" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True">
				<Grid>
					<Image x:Name="Image" Width="32" Height="32" VerticalAlignment="Center"
						Source="{TemplateBinding ImageSourceLarge}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}" SnapsToDevicePixels="True" />
				</Grid>
			</Border>

			<Grid x:Name="LabelStackPanel" Grid.Column="1" Margin="5,0,5,0" VerticalAlignment="Top">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>
				
				<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" Margin="0,3,0,0" FontWeight="Bold" 
														  Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" />
				<TextBlock x:Name="MenuItemDescription" Margin="0,2,0,3" LineHeight="{Binding RelativeSource={RelativeSource Self}, Path=FontSize}" LineStackingStrategy="BlockLineHeight" Grid.Row="1" TextWrapping="Wrap" Text="{TemplateBinding MenuItemDescription}" />
			</Grid>
					
			<Rectangle x:Name="SplitButtonInnerBorder" Grid.Column="2" Margin="0,1,0,1" Width="1" HorizontalAlignment="Left" Fill="Transparent" />
			<Rectangle x:Name="SplitButtonOuterBorder" Grid.Column="2" Margin="1,1,0,1" Width="1" HorizontalAlignment="Left" Fill="Transparent" />
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" 
				Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlRightArrowBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade" />
			</Trigger>
			<Trigger Property="PopupHasBorder" Value="False">
				<Setter TargetName="PopupOuterBorder" Property="BorderThickness" Value="0" />
				<Setter TargetName="PopupOuterBorder" Property="Background" Value="{x:Null}" />
				<Setter TargetName="PopupInnerBorder" Property="BorderThickness" Value="0" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Both">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Vertical">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
				<Setter TargetName="PART_ResizeGrip" Property="Style" Value="{StaticResource VerticalResizeGripperStyle}" />
			</Trigger>
			
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="MenuItemDescription" Value="{x:Null}">
				<Setter TargetName="LabelStackPanel" Property="VerticalAlignment" Value="Center" />
				<Setter TargetName="Label" Property="Margin" Value="0" />
				<Setter TargetName="Label" Property="FontWeight" Value="Normal" />
				<Setter TargetName="MenuItemDescription" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="MenuItemDescription" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBorderBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBackgroundBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitButtonOuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitButtonInnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundSemiHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundDisabledBrushKey}}" />
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLargeBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
				<Setter TargetName="SplitButtonOuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="SplitButtonInnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- SplitButtonMenuItemSmallTemplate -->
	<ControlTemplate x:Key="SplitButtonMenuItemSmallTemplate" TargetType="{x:Type ribbonControls:SplitButton}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallPopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Popup Name="PART_Popup" Grid.ColumnSpan="3" AllowsTransparency="True" MinWidth="16" MinHeight="16" StaysOpen="True"
					IsOpen="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
					CustomPopupPlacementCallback="{TemplateBinding CustomPopupPlacementCallback}" 
					HorizontalOffset="{TemplateBinding PopupHorizontalOffset}"
					Placement="{TemplateBinding PopupPlacement}"
					PlacementRectangle="{TemplateBinding PopupPlacementRectangle}"
					PlacementTarget="{TemplateBinding PopupPlacementTarget}"
					VerticalOffset="{TemplateBinding PopupVerticalOffset}"
					>
				<AdornerDecorator SnapsToDevicePixels="True">
					<shared:DropShadowChrome Name="DropShadow" Color="Transparent">
						<Border x:Name="PopupOuterBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuOuterBorderBrushKey}}" BorderThickness="1" 
							Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuBackgroundBrushKey}}" SnapsToDevicePixels="True">
							<Border x:Name="PopupInnerBorder" BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.ContextMenuInnerBorderBrushKey}}" BorderThickness="1" SnapsToDevicePixels="True">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<ribbonControlsPrimitives:PopupScrollViewer CanContentScroll="True"
										Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuScrollViewer}}">
										<ribbonControlsPrimitives:PopupContentPresenter Content="{TemplateBinding PopupContent}" 
											ContentTemplate="{TemplateBinding PopupContentTemplate}" ContentTemplateSelector="{TemplateBinding PopupContentTemplateSelector}" />
									</ribbonControlsPrimitives:PopupScrollViewer>
									
									<Border Name="ResizeGripContainer" Grid.Row="1" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2" Visibility="Collapsed"
										BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripSeparatorBrushKey}}" SnapsToDevicePixels="True"
										Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.PopupGalleryResizeGripBackgroundBrushKey}}">
										<Thumb x:Name="PART_ResizeGrip" Style="{StaticResource BothResizeGripperStyle}" />
									</Border>
								</Grid>
							</Border>
						</Border>
					</shared:DropShadowChrome>
				</AdornerDecorator>
			</Popup>
				
			<Border BorderThickness="0,0,1,0" SnapsToDevicePixels="True" 
				BorderBrush="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorLightBrushKey}}" 
				Background="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemIconColumnBackgroundBrushKey}}">
				<Rectangle Margin="0,-1,0,-1" Width="1" HorizontalAlignment="Right" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuSeparatorDarkBrushKey}}" SnapsToDevicePixels="True" />
			</Border>
			
			<Rectangle x:Name="OuterBorder" Grid.ColumnSpan="3" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			<Rectangle x:Name="PART_Button" Grid.ColumnSpan="2" Margin="1,1,0,1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="RightBackground" Grid.Column="2" Margin="0,1,1,1" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True" />
			<Rectangle x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2,2,0,2" Width="20" Height="20" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True">
				<Grid>
					<Image x:Name="Image" HorizontalAlignment="Center" VerticalAlignment="Center"
						Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
						Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
						Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}" SnapsToDevicePixels="True" />
				</Grid>
			</Border>
			<DockPanel Grid.Column="1" Margin="5,0,5,0">
				<TextBlock x:Name="InputGestureText" DockPanel.Dock="Right" Margin="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" />				
				<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" VerticalAlignment="Center" 
														  Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" />
			</DockPanel>
			<Rectangle x:Name="SplitButtonInnerBorder" Grid.Column="2" Margin="0,1,0,1" Width="1" HorizontalAlignment="Left" Fill="Transparent" />
			<Rectangle x:Name="SplitButtonOuterBorder" Grid.Column="2" Margin="1,3,0,3" Width="1" HorizontalAlignment="Left" Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" />
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" 
				Fill="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlRightArrowBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade" />
			</Trigger>
			<Trigger Property="PopupHasBorder" Value="False">
				<Setter TargetName="PopupOuterBorder" Property="BorderThickness" Value="0" />
				<Setter TargetName="PopupOuterBorder" Property="Background" Value="{x:Null}" />
				<Setter TargetName="PopupInnerBorder" Property="BorderThickness" Value="0" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Both">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="PopupResizeMode" Value="Vertical">
				<Setter TargetName="ResizeGripContainer" Property="Visibility" Value="Visible" />
				<Setter TargetName="PART_ResizeGrip" Property="Style" Value="{StaticResource VerticalResizeGripperStyle}" />
			</Trigger>
			
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="InputGestureText" Value="{x:Null}">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="ribbonControls:Menu.IsMenuItemInputGestureTextVisible" Value="False">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBorderBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemCheckBackgroundBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitButtonOuterBorder" Property="Margin" Value="1,1,0,1" />
				<Setter TargetName="SplitButtonOuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}"/>
				<Setter TargetName="SplitButtonInnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
					<Condition Property="IsPopupOpen" Value="True" />
					<Condition Property="IsButtonHighlighted" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundSemiHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_Button" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundDisabledBrushKey}}" />
				<Setter TargetName="RightBackground" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlSmallBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="Stroke" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
				<Setter TargetName="SplitButtonOuterBorder" Property="Margin" Value="1,1,0,1" />
				<Setter TargetName="SplitButtonOuterBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlOuterBorderDisabledBrushKey}}"/>
				<Setter TargetName="SplitButtonInnerBorder" Property="Fill" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ribbonControls:SplitButton -->
	<Style x:Key="{x:Type ribbonControls:SplitButton}" TargetType="{x:Type ribbonControls:SplitButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.RibbonControlLabelForegroundBrushKey}}"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="MinWidth" Value="14"/>
		<Setter Property="Padding" Value="2,2,1,2"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template" Value="{StaticResource SplitButtonSmallTemplate}" />
		
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="HasLabel" Value="False" />
					<Condition Property="systemComponentModel:DesignerProperties.IsInDesignMode" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="ImageSourceSmall" Value="/ActiproSoftware.Ribbon.Wpf351;component/Products/Ribbon/Images/ButtonDefault16.png" />
				<Setter Property="ImageSourceLarge" Value="/ActiproSoftware.Ribbon.Wpf351;component/Products/Ribbon/Images/ButtonDefault32.png" />
			</MultiTrigger>
			<Trigger Property="VariantSize" Value="Large">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
				<Setter Property="Template" Value="{StaticResource SplitButtonLargeTemplate}" />
			</Trigger>
			<Trigger Property="VariantSize" Value="Collapsed">
				<Setter Property="MinHeight" Value="0"/>				
				<Setter Property="MinWidth" Value="0"/>				
			</Trigger>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="PopupPlacement" Value="Right"/>
				<Setter Property="Template" Value="{StaticResource SplitButtonMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource SplitButtonMenuItemLargeTemplate}" />
			</MultiTrigger>
			<Trigger Property="Context" Value="StatusBarItem">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>				
				<Setter Property="Padding" Value="0"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- RibbonControlsSplitButtonLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsSplitButtonLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource SplitButtonLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsSplitButtonCollapsedStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsSplitButtonCollapsedStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="MinHeight" Value="0"/>				
		<Setter Property="MinWidth" Value="0"/>				
	</Style>
	
	<!-- RibbonControlsSplitButtonMenuItemLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsSplitButtonMenuItemLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource SplitButtonMenuItemLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsSplitButtonMenuItemSmallStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsSplitButtonMenuItemSmallStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static ribbonThemes:RibbonCommonDictionary.MenuItemForegroundBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
		<Setter Property="Template" Value="{StaticResource SplitButtonMenuItemSmallTemplate}" />
	</Style>
	
	<!-- RibbonControlsSplitButtonStatusBarStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsSplitButtonStatusBarStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>				
		<Setter Property="Padding" Value="0"/>
	</Style>
	
</ResourceDictionary>