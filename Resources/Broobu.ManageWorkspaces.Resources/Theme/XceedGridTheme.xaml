<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xcdg="clr-namespace:Xceed.Wpf.DataGrid.Converters;assembly=Xceed.Wpf.DataGrid" 
    xmlns:DataGrid="clr-namespace:Xceed.Wpf.DataGrid;assembly=Xceed.Wpf.DataGrid" 
    xmlns:Views="clr-namespace:Xceed.Wpf.DataGrid.Views;assembly=Xceed.Wpf.DataGrid">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="XceedGridThemeResources.xaml" />
    </ResourceDictionary.MergedDictionaries>



    <Style TargetType="{x:Type DataGrid:DataCell}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <!--**************************
    * STYLE: ColumnManagerRowSplitterStyle
    ************************** -->
    <!--<Style x:Key="columnManagerRowSplitterStyle"   TargetType="Views:FixedColumnSplitter" 
           BasedOn="{StaticResource baseFixedColumnSplitterStyle}">
    </Style>-->

    <!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
    <Style x:Key="cellErrorStyle"   TargetType="DataGrid:Cell">
        <Setter Property="Background"        Value="{StaticResource errorBackgroundBrush}"/>
        <Setter Property="Foreground"        Value="{StaticResource errorForegroundBrush}"/>
        <Setter Property="ToolTip"           Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}"/>
        <Setter Property="CurrentBackground" Value="DarkGray"></Setter>
    </Style>
    <xcdg:IndexToOddConverter x:Key="TableViewXceedDataGrid "/>
    <Style x:Key="tableViewXceedDataGridTheme3RowStyle"  TargetType="{x:Type DataGrid:Row}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="NavigationBehavior" Value="RowOnly"></Setter>
        <Setter Property="Background"  Value="{StaticResource FilterBackground}" />
        <!--Odd Rows-->
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="SelectionBackground"    Value="red"/>
        <Setter Property="SelectionForeground"    Value="Black"/>
        <Setter Property="InactiveSelectionBackground"  Value="red"/>
        <Setter Property="InactiveSelectionForeground"   Value="Black" />
        <Style.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Views:ViewBase.IsLastItem)}"
                      Value="True">
                <Setter Property="Background" Value="Red"></Setter>
                <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(DataGrid:DataGridControl.DataGridContext).HorizontalGridLineThickness,ConverterParameter='Top, Bottom'}" />
                <Setter Property="Margin"
                    Value="0,0,0,5"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(DataGrid:DataGridVirtualizingPanel.ItemIndex),  Converter={StaticResource TableViewXceedDataGrid}, RelativeSource={RelativeSource Self}}"         Value="True">
                <Setter Property="Background" Value="White" />
                <!--Even Rows-->
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#EBF7FD" />
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridVirtualizingPanel.ItemIndex), Converter={x:Static xcdg:IndexToOddConverter.Singleton}}"
                          Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter Property="Background"
                    Value="yellow" />
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>

    <!--**************************STYLE: FilterRow  **************************-->

    <Style TargetType="DataGrid:FilterRow" BasedOn="{StaticResource tableViewXceedDataGridTheme3RowStyle}" >
        <Setter Property="SelectionBackground" Value="Blue"></Setter>
        <Style.Triggers>
            <Trigger Property="DataGrid:GroupLevelIndicatorPane.GroupLevel"
                  Value="1">
                <!-- We don't want to display the Group Margins for the FilterRow. -->
                <Setter Property="DataGrid:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style 
          TargetType="DataGrid:FilterCell">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Background" Value="{StaticResource FilterBackground}" />
        <!--<Style.Resources>
            <Style TargetType="Button">
                <Setter Property="Background"
                 Value="#FF84868E"/>
            </Style>
        </Style.Resources>-->
        <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->

        <!--<Setter Property="Width"       Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />
        <Setter Property="Padding"     Value="{StaticResource cellPadding}" />-->

        <Style.Triggers>
            <Trigger Property="ContentTemplate"
                  Value="{x:Null}">
                <!--<Setter Property="Background">
                    <Setter.Value>
                        <VisualBrush Visual="{StaticResource patternFilteringDisabled}"
						             TileMode="Tile"
						             Stretch="None"
						             Viewport="0,0,30,59"
						             ViewportUnits="Absolute"/>
                    </Setter.Value>
                </Setter>-->
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background"  Value="{StaticResource filterCellBackground}"  />
                <Setter Property="BorderThickness" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DataGridControl background colour-->

    <Style  x:Key="{x:Type DataGrid:DataGridControl}"   TargetType="{x:Type DataGrid:DataGridControl}">
        <Setter Property="Background" Value="#FDFDFC"></Setter>
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Foreground"          Value="Black" />
        <Setter Property="BorderThickness"     Value="0" />
        <!-- This is required to display gridlines of uniform thickness -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CellErrorStyle"   Value="{StaticResource cellErrorStyle}" />
    </Style>

    <!--baseSplitterStyle -->
    <Style x:Key="baseFixedColumnSplitterStyle"   TargetType="Views:FixedColumnSplitter"></Style>

    <!--rowSplitterStyle -->
    <Style x:Key="rowSplitterStyle" TargetType="Views:FixedColumnSplitter"   BasedOn="{StaticResource baseFixedColumnSplitterStyle}">
        <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
    </Style>

    <!-- StatRowSplitterStyle -->
    <Style x:Key="statRowSplitterStyle"  TargetType="Views:FixedColumnSplitter"   BasedOn="{StaticResource baseFixedColumnSplitterStyle}">
        <!-- For aesthetic reasons, the FixedColumnSplitter is not shown in the StatRow. -->
        <Setter Property="Template"     Value="{x:Null}"/>
    </Style>


    <!--Table view used For Horizontal and vertical grid lines , ColumnStretch -->
    <Style  x:Key="{x:Type Views:TableView}" TargetType="{x:Type Views:TableView}">

        <Setter Property="ColumnStretchMode" Value="All"></Setter>
        <Setter Property="ColumnStretchMinWidth" Value="100"></Setter>
        <Setter Property="ShowRowSelectorPane" Value="false" />
        <Setter Property="UseDefaultHeadersFooters" Value="True" />
        <Setter Property="FixedColumnSplitterWidth" Value="0"></Setter>
        <Setter Property="HorizontalGridLineBrush"    Value="{StaticResource gridLineBrush}" />
        <Setter Property="HorizontalGridLineThickness"   Value="0" />
        <Setter Property="VerticalGridLineBrush" Value="#CBDDC2" />
        <Setter Property="VerticalGridLineThickness"   Value="0.6" />
    </Style>

    <!--**************************  STYLE: RowSelectorPane   ************************** -->
    <Style x:Key="{x:Type DataGrid:RowSelectorPane}"  TargetType="{x:Type DataGrid:RowSelectorPane}"   >
        <Setter Property="Background"   Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    </Style>

    <!--**************************  STYLE: RowSelector    ************************** -->
    <xcdg:TypeToBooleanConverter x:Key="insertionRowTypeConverter" />
    <Style x:Key="DataGrid:RowSelector"     TargetType="{x:Type DataGrid:RowSelector}">
        <!-- Set the RowSelector's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying RowSelectorPane. -->
        <Setter Property="Background"              Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"              Value="Center" />
        <Setter Property="VerticalContentAlignment"              Value="Top" />
        <Setter Property="Padding"              Value="2" />
        <Style.Triggers>
            <!-- The DataContext of a RowSelector is always set to its corresponding
              Row/item. This is why we use DataTriggers with no explicit Binding Source
              when we want to react to properties of the Row/item. -->

            <!-- When the Row is Current, display the current glyph in the RowSelector (but not when the Row is an InsertionRow. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource insertionRowTypeConverter}, ConverterParameter={x:Type DataGrid:InsertionRow} }"
                          Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).CurrentItemGlyph}" />
            </MultiDataTrigger>

            <!-- When the Row is being edited, display the appropriate glyph in the RowSelector. -->
            <Trigger Property="IsBeingEdited"
                  Value="True">
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).EditingRowGlyph}" />

            </Trigger>

            <!-- When the Row has a validation error, display the appropriate glyph in the RowSelector. -->
            <Trigger Property="HasValidationError"
                  Value="True">
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).ValidationErrorGlyph}" />
            </Trigger>

            <!-- When the row is an InsertionRow and the row is not being current -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource insertionRowTypeConverter}, ConverterParameter={x:Type DataGrid:InsertionRow} }"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsBeingEdited}"
                          Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasValidationError}"
                          Value="False" />
                </MultiDataTrigger.Conditions>

                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).InsertionRowGlyph}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>



    <!--Alternate Row Style-->
    <xcdg:IndexToOddConverter x:Key="TableViewXceedDataGridThemeDataRow"/>
    <Style TargetType="{x:Type DataGrid:DataRow}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="NavigationBehavior" Value="RowOnly"></Setter>
        <Setter Property="Background" Value="#E8E8E8" />
        <!--Odd Rows-->
        <Setter Property="Foreground" Value="#383737"/>
        <Setter Property="SelectionBackground"    Value="{StaticResource RowSelectionBackground}"/>
        <Setter Property="SelectionForeground"    Value="Black"/>
        <Setter Property="InactiveSelectionBackground"  Value="{StaticResource RowSelectionBackground}"/>
        <Setter Property="InactiveSelectionForeground"   Value="Black" />
        <Setter Property="Views:TableView.FixedColumnSplitterStyle"      Value="{StaticResource rowSplitterStyle}"/>

        <!-- The Row is responsible for drawing the horizontal gridlines. It draws only its top gridline,
           assuming that the bottom gridline will be drawn by its following row/element -->

        <Setter Property="BorderBrush"          Value="LightGray" />
        <Setter Property="BorderThickness" Value="0.5"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(DataGrid:DataGridVirtualizingPanel.ItemIndex),  Converter={StaticResource TableViewXceedDataGridThemeDataRow}, RelativeSource={RelativeSource Self}}"         Value="True">
                <Setter Property="Background" Value="White" />
                <!--Even Rows-->
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource RowSelectionHoverBackground}" />
            </Trigger>
        </Style.Triggers>

    </Style>


    <!--************************** STYLE: Cell Style   ************************** -->
    <Style   TargetType="{x:Type DataGrid:Cell}"  >
        <Setter Property="HorizontalAlignment"    Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CurrentBackground"      Value="blue" />
        <Setter Property="CurrentForeground"      Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

        <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
        <Setter Property="Background"    Value="Transparent" />

        <!-- In TableView, each Cell has the same width as its ParentColum's ActualWidth -->
        <Setter Property="Width"         Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />
        <Setter Property="Padding"       Value="{StaticResource cellPadding}" />

        <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->
        <Setter Property="BorderThickness"   Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).VerticalGridLineThickness, ConverterParameter='Right'}" />
        <Setter Property="BorderBrush"      Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).VerticalGridLineBrush}" />


    </Style>


    <!-- ColumnManagerRow - Header Style-->

    <Style  x:Key="{x:Type DataGrid:ColumnManagerRow}" TargetType="{x:Type DataGrid:ColumnManagerRow}"  >

        <Setter Property="HorizontalAlignment"  Value="Center" />
        <Setter Property="Background" Value="#B6BBBF" />
        <Setter Property="Foreground" Value="#003f70"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>

        <Style.Triggers>
            <Trigger Property="DataGrid:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
                <!-- We don't want to display the Group Margins for the ColumnManagerRow. -->
                <Setter Property="DataGrid:GroupLevelIndicatorPane.ShowIndicators"
                    Value="true"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
    <!--<Style 
          TargetType="{x:Type DataGrid:AutoFilterControl}">
        <Setter Property="Background" Value="Blue"></Setter>
        <Setter Property="AutoFilterColumn" Value="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid:ColumnManagerCell},
                                                            Path=ParentColumn}">            
            
        </Setter>
    </Style>-->

    <!--<DataGrid:AutoFilterControl x:Key="autoFilterControl"
                                              Background="Blue"
                                              Foreground="red"
                                              BorderBrush="Black"
                                              BorderThickness="1"
                                              AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid:ColumnManagerCell},
                                                            Path=ParentColumn}"
                                              Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid:ColumnManagerCell}, 
                                                 Path=ParentColumn.AutoFilterControlStyle}"
                                              TextElement.Foreground="{TemplateBinding TextElement.Foreground}" />


    <Style x:Key="autoFilterControlStyle" TargetType="{x:Type DataGrid:AutoFilterControl}">
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="Background" Value="Blue"></Setter>
    </Style>-->

    <!--ColumnManagerCell Style-->

    <Style TargetType="DataGrid:ColumnManagerCell">
        <Style.Resources>
            <Style x:Key="invisibleThumbStyle" TargetType="Thumb">
                <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.ResizeFrameVerticalBorderWidthKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.ResizeFrameHorizontalBorderHeightKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Thumb" >
                            <Grid Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--************************** TEMPLATE: FilterToggleButton **************************-->

            <ControlTemplate TargetType="{x:Type ToggleButton}" x:Key="filterToggleButton">

                <Grid Background="Transparent" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                    <Grid Width="16" Background="Transparent" HorizontalAlignment="Center">

                        <ContentPresenter x:Name="glyphPresenter"
                        ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                        Content="{TemplateBinding Content}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Margin="0,0,0,0"
                        Opacity="{TemplateBinding Opacity}" />

                        <ContentPresenter x:Name="filterActivatedGlyphPresenter" 
                        ContentTemplate="{x:Null}"
                        Content="{TemplateBinding Content}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Margin="0,0,2,0"
                        Opacity="{TemplateBinding Opacity}">
                        </ContentPresenter>

                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <!-- Display AutoFilterGlyph when there are AutoFilterValues -->

                    <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" Value="True">
                        <Setter TargetName="glyphPresenter" Property="ContentTemplate" Value="{x:Null}" />
                        <Setter TargetName="filterActivatedGlyphPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).AutoFilterGlyph}" />
                    </DataTrigger>
                    <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
                    <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" Value="False">
                        <Setter TargetName="glyphPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <Setter Property="Template">

            <Setter.Value>
                <!--************************** TEMPLATE: ColumnManagerCell ************************** -->
                <ControlTemplate TargetType="DataGrid:ColumnManagerCell">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template" Value="{StaticResource filterToggleButton}" />
                        </Style>
                    </ControlTemplate.Resources>


                    <!-- We don't use the base Cell Template for the ColumnManagerCell because it need more elements to function properly: a Thumb named "PART_ColumnResizerThumb" that is used to resize the ColumnManagerCells's ParentColumn.Width and a glyph that represents the Column's SortDirection. -->
                    <!--Tab Control in ColumnManagerCell-->
                    <!--<Border BorderBrush="#80B0e1" Background="#80B0e1" CornerRadius="15,15,0,0">-->
                    <Border Name="border"     CornerRadius="5,5,0,0"  BorderThickness="0.5">
                        <!--<Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#80B0e1"   Offset="0.2" />
                                <GradientStop Color="#17497e"   Offset="1" />
                            </LinearGradientBrush>
                        </Border.BorderBrush>-->
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#a5c8f5"
                                       Offset="0.5"  />
                                <GradientStop Color="#cfe4ff"
                                        Offset="0.40" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->

                        <Grid>

                            <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" HorizontalAlignment="Left"                                         VerticalAlignment="Stretch" Width="0" Margin="0,2,0,2" />
                            <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"  HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="0" Margin="0,2,0,2" />
                            <DockPanel>


                                <Border x:Name="thumbToggleBackgroundBorder" DockPanel.Dock="Right">
                                    <Grid>
                                        <!--Background="#80B0e1"-->
                                        <Border x:Name="toggleDelimeterBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                          BorderThickness="0,0,0,0" Margin="0,2,0,2" Background="Transparent" Visibility="Collapsed">
                                            <Border x:Name="toggleDelimeterBorder2" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                            BorderThickness="0,0,0,0"       
                            Margin="0,0,0,0"     
                            Visibility="Collapsed" >
                                            </Border>
                                        </Border>
                                        <ToggleButton x:Name="toggleButton" Focusable="False" VerticalAlignment="Stretch" Visibility="Collapsed" Margin="2,0,0,0" Opacity="0.5" />
                                        <DataGrid:AutoFilterPopup x:Name="filterOptions" PopupAnimation="Slide" IsOpen="{Binding ElementName=toggleButton,Path=IsChecked,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                            StaysOpen="False" AllowsTransparency="True" PlacementTarget="{Binding ElementName=toggleButton}">

                                            <DataGrid:AutoFilterControl x:Name="autoFilterControl"
                             Background="#f4f2f2" BorderBrush="Black" BorderThickness="1" Foreground="Black"
                             AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid:ColumnManagerCell},
                             Path=ParentColumn}" Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=DataGrid:ColumnManagerCell},
                             Path=ParentColumn.AutoFilterControlStyle}"
                             TextElement.Foreground="Black" />
                                            <!--TextElement.Foreground="{TemplateBinding TextElement.Foreground}" />-->
                                        </DataGrid:AutoFilterPopup>

                                        <!-- Thumb that is used to resize the Column. -->
                                        <Thumb x:Name="PART_ColumnResizerThumb" Style="{StaticResource invisibleThumbStyle}"    Width="6" HorizontalAlignment="Right" />
                                    </Grid>
                                </Border>
                                <Border Background="{TemplateBinding Background}">

                                    <!-- This Grid is used to layout the delimiter lines on top of the ContentPresenter -->
                                    <Grid>
                                        <Border Padding="{TemplateBinding Padding}"  HorizontalAlignment="Center">
                                            <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                                            <StackPanel x:Name="contentPanel" Orientation="Horizontal">
                                                <!-- Same ContentPresenter as in the base Cell Template. -->
                                                <DataGrid:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                <!-- ContentPresenter that is used to display the sort glyph.We explicitly set its Content property to Null to prevent the XAML parser from implicitly setting it to its TemplatedParent's Content. -->
                                                <ContentPresenter x:Name="sortGlyphPresenter" Content="{x:Null}" ContentTemplate="{x:Null}" />
                                            </StackPanel>
                                        </Border>
                                    </Grid>
                                </Border>
                            </DockPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Trigger related to the filteringToggleButton-->

                        <Trigger SourceName="toggleButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="toggleButton" Property="Opacity" Value="1" />
                        </Trigger>

                        <!-- Always visible if filterOptions popup IsOpen -->

                        <Trigger SourceName="filterOptions" Property="IsOpen" Value="True">
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleButton" Property="Opacity" Value="1" />
                            <Setter TargetName="toggleDelimeterBorder2" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleButton" Property="Opacity" Value="1" />
                        </Trigger>

                        <!-- Display FilterToggleButton Trigger on MouseOver -->

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}" Value="True" />

                                <!-- Disable this condition in order to make the filter toggle button always visible-->

                                <!--<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />-->

                                <Condition Value="True" Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleDelimeterBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleDelimeterBorder2" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->

                        <MultiDataTrigger>

                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}" Value="True" />
                                <Condition Value="True" Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />
                                <Condition Value="True" Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleDelimeterBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleDelimeterBorder2" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleButton" Property="Opacity" Value="1" />
                        </MultiDataTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="contentPanel" Property="Margin" Value="1,1,-1,-1" />
                        </Trigger>
                        <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed depending on the ParentColumn's SortDirection. -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}" Value="Ascending">
                            <Setter TargetName="sortGlyphPresenter" Property="ContentPresenter.ContentTemplate" Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).AscendingSortGlyph}" />
                            <Setter TargetName="sortGlyphPresenter" Property="Margin" Value="6,0,0,0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}" Value="Descending">
                            <Setter TargetName="sortGlyphPresenter" Property="ContentPresenter.ContentTemplate" Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).DescendingSortGlyph}" />
                            <Setter TargetName="sortGlyphPresenter" Property="Margin" Value="6,0,0,0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}" Value="True" />
                                <!-- Don't disable resizing if ColumnStretching can be disabled by an end-user resize. -->
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ColumnResizerThumb" Property="IsEnabled" Value="False" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}" Value="False">
                            <Setter TargetName="PART_ColumnResizerThumb" Property="IsEnabled" Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <!--************************** STYLE: ScrollTip ************************** -->
    <Style x:Key="{x:Type DataGrid:ScrollTip}"  TargetType="{x:Type DataGrid:ScrollTip}"  >
        <Setter Property="Template"  Value="{StaticResource scrollTipTemplate}"/>
        <Setter Property="VerticalAlignment"  Value="Center"/>
        <Setter Property="HorizontalAlignment"     Value="Right"/>
        <Setter Property="Background"    Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
        <Setter Property="Foreground"      Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderBrush"     Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
    </Style>

    <!--**************************STYLE: GroupByControl ************************** -->

    <Style x:Key="{x:Type DataGrid:GroupByControl}"
         TargetType="{x:Type DataGrid:GroupByControl}"  >
        <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange the control with a Height of 0, which makes it invisible and unusable.
           In a typical TableView, a height of at least 25 is appropriate for the GroupByControl. -->
        <Setter Property="MinHeight"      Value="25" />
        <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter Property="Foreground"    Value="#003f70" />
        <Setter Property="Padding"      Value="8"/>
        <Setter Property="BorderBrush"     Value="{StaticResource gridLineBrush}" />
        <Setter Property="BorderThickness"     Value="1,1,1,0" />
        <Setter Property="DataGrid:RowSelector.Visible"     Value="False" />
        <Setter Property="Views:TableView.CanScrollHorizontally"   Value="False" />
    </Style>

    <!--GREEN-->
    <!--************************** STYLE: GroupByItem   ************************** -->

    <Style x:Key="{x:Type DataGrid:GroupByItem}"
         TargetType="{x:Type DataGrid:GroupByItem}" >
        <Setter Property="Background"       Value="#D0D9A7" />
        <Setter Property="Foreground"       Value="#003f70" />
        <Setter Property="Padding"          Value="2,2,2,2" />
        <Setter Property="Template"
              Value="{StaticResource GroupByItemTemplate}" />
    </Style>

    <!--**************************
    * STYLE: GroupHeaderControl  {x:Static SystemColors.ControlBrushKey}
    ************************** -->
    <Style  x:Key="{x:Type DataGrid:GroupHeaderControl}"  TargetType="{x:Type DataGrid:GroupHeaderControl}" >

        <Setter Property="Background"  Value="{StaticResource GroupHeaderBackground}" />
        <Setter Property="Foreground"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource gridLineBrush}" />
        <Setter Property="Views:TableView.CanScrollHorizontally"  Value="False"/>
        <Setter Property="BorderThickness"  Value="0,0,0,0" />
        <Setter Property="Padding"          Value="{StaticResource cellPadding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it is holding the various InputBindings that make the
           GroupHeaderControl work. -->
        <Setter Property="Focusable"          Value="False" />

    </Style>



    <!--************************** STYLE: GroupLevelIndicator   ************************** -->
    <Style x:Key="{x:Type DataGrid:GroupLevelIndicator}"    TargetType="{x:Type DataGrid:GroupLevelIndicator}" >
        <Setter Property="Background"              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground"              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush"              Value="{StaticResource gridLineBrush}" />
        <Setter Property="BorderThickness"              Value="0,0,1,0" />
        <Setter Property="Width"              Value="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).GroupLevelIndicatorWidth}" />
    </Style>

    <!--************************** STYLE: HierarchicalGroupLevelIndicatorPane   ************************** -->
    <Style x:Key="{x:Type DataGrid:HierarchicalGroupLevelIndicatorPane}"
        TargetType="{x:Type DataGrid:HierarchicalGroupLevelIndicatorPane}" >
    </Style>

    <!--************************** STYLE: HierarchicalGroupByControlNode   ************************** -->
    <Style x:Key="{x:Type DataGrid:HierarchicalGroupByControlNode}" 
      TargetType="{x:Type DataGrid:HierarchicalGroupByControlNode}"  >
        <Setter Property="StairHeight"              Value="0"/>
        <Setter Property="ConnectionLineOffset"               Value="0"/>
        <Setter Property="ConnectionLineAlignment"              Value="CenterToCenter"/>
        <Setter Property="Focusable"              Value="False"/>
        <Setter Property="Margin"              Value="4"/>
    </Style>

    <!--************************** STYLE: HierarchicalGroupByControl    ************************** -->
    <Style x:Key="{x:Type DataGrid:HierarchicalGroupByControl}"   TargetType="{x:Type DataGrid:HierarchicalGroupByControl}" >

        <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical TableView, a height of at least 25 is appropriate for the GroupByControl. -->
        <Setter Property="MinHeight"             Value="25" />
        <Setter Property="Background"     Value="{StaticResource GroupByControlBackground}"/>
        <Setter Property="Foreground"              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding"              Value="8"/>
        <Setter Property="BorderBrush"              Value="#B6BBBF"/>
        <Setter Property="BorderThickness"              Value="0,0,0,4" />
        <Setter Property="StairHeight"              Value="0"/>
        <Setter Property="ConnectionLineOffset"              Value="0"/>
        <Setter Property="ConnectionLineAlignment"              Value="CenterToCenter"/>
        <Setter Property="DataGrid:RowSelector.Visible"              Value="False" />
        <Setter Property="Views:TableView.CanScrollHorizontally"              Value="False" />

        <Style.Triggers>
            <!-- We use the old GroupByControl Template if there are no Details in the DataGridControl.ItemsSource -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).HasDetails}"
                          Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGrid:DataGridControl.DataGridContext).ParentDataGridContext}"
                          Value="True"/>
                </MultiDataTrigger.Conditions>
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>

    <!--**************************
    * STYLE: HierarchicalGroupByItem
    ************************** -->
    <Style x:Key="{x:Type DataGrid:HierarchicalGroupByItem}" 
       TargetType="{x:Type DataGrid:HierarchicalGroupByItem}" >
        <Setter Property="Background"              Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground"              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding"              Value="{StaticResource cellPadding}" />
        <Setter Property="Margin"              Value="4,0,4,0"/>
    </Style>



</ResourceDictionary>